package com.example.mygroceries.adapter;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import android.app.Activity;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.TextView;

import com.example.mygroceries.R;
import com.example.mygroceries.database.Brand;
import com.example.mygroceries.database.Item;

public class ItemAdapter extends BaseExpandableListAdapter{
	private Activity context;
	private Map<Item, ArrayList<Brand>> collections;
	private Map<Item, ArrayList<Brand>> originalCollections;
	private List<Item> list;
	private List<Item> originalList;
	
	
	public ItemAdapter(Activity context, ArrayList<Item> list,
			Map<Item, ArrayList<Brand>> collections) {
		this.context = context;
		this.collections = collections;
		this.list = list;
		
		originalList = new ArrayList<Item>();
		originalList.addAll(list);
		
		originalCollections = new HashMap<Item, ArrayList<Brand>>();
		originalCollections.putAll(collections);
	}

	
	@Override
	public Brand getChild(int groupPosition, int childPosition) {
		return collections.get(list.get(groupPosition)).get(
				childPosition);
	}

	@Override
	public long getChildId(int groupPosition, int childPosition) {
		return childPosition;
	}

	@Override
	public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {
		Brand brand = getChild(groupPosition, childPosition);
		
		LayoutInflater inflater = context.getLayoutInflater();

		if (convertView == null) {
			convertView = inflater.inflate(R.layout.child_item, null);
		}

		TextView brandName = (TextView) convertView.findViewById(R.id.brand_text);
		
		brandName.setText(brand.getName());
		
		return convertView;
	}

	@Override
	public int getChildrenCount(int groupPosition) {
		return collections.get(list.get(groupPosition)).size();	
	}

	@Override
	public Item getGroup(int groupPosition) {
		return list.get(groupPosition);
	}

	@Override
	public int getGroupCount() {
		return list.size();
	}

	@Override
	public long getGroupId(int groupPosition) {
		return groupPosition;
	}

	@Override
	public View getGroupView(int groupPosition, boolean isExpanded,
			View convertView, ViewGroup parent) {
		Item item = getGroup(groupPosition);
		
		if (convertView == null) {
			LayoutInflater infalInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			convertView = infalInflater.inflate(R.layout.parent_item, null);
		}
		
		TextView itemName = (TextView) convertView.findViewById(R.id.itemText);
		itemName.setText(item.getName());
		
		sortList();
		
		return convertView;
	}

	@Override
	public boolean hasStableIds() {
		return true;
	}

	@Override
	public boolean isChildSelectable(int groupPosition, int childPosition) {
		return true;
	}
	
	public void addRow(Item item) {
		list.add(item);
		originalList.add(item);
		
		collections.put(item, new ArrayList<Brand>());
		originalCollections.put(item, new ArrayList<Brand>());
		
		sortList();
	}
	
	private void sortList() {
		Collections.sort(list, new Comparator<Item>() {
			@Override
			public int compare(Item i1, Item i2) {
	            return i1.getName().compareTo(i2.getName());
	        }

		});
	}
	
	public void filter(String charText) {
		charText = charText.toLowerCase(Locale.getDefault());
		list.clear();
		collections.clear();
		if (charText.length() == 0) {
			list.addAll(originalList);
			collections.putAll(originalCollections);
		} else {
			for (Item item : originalList) {
				ArrayList<Brand> brand = originalCollections.get(item);
				ArrayList<Brand> array = new ArrayList<Brand>();
				
				for(Brand b : brand){
					if(b.getName().toLowerCase(Locale.getDefault())
					.contains(charText)){
						array.add(b);
						
					}
				}
				
				if (!array.isEmpty() || item.getName().toLowerCase(Locale.getDefault())
						.contains(charText)){
					collections.put(item, array);
					list.add(item);
				}
			}
		}

		notifyDataSetChanged();
	}
}
