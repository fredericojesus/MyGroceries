package com.example.mygroceries.adapter;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.renderscript.Sampler.Value;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.WindowManager;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Adapter;
import android.widget.BaseExpandableListAdapter;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RadioButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.example.mygroceries.R;
import com.example.mygroceries.database.Brand;
import com.example.mygroceries.database.Category;
import com.example.mygroceries.database.DBCategory;
import com.example.mygroceries.database.DBItem;
import com.example.mygroceries.database.DBStorageArea;
import com.example.mygroceries.database.Item;
import com.example.mygroceries.database.StorageArea;

public class ItemAdapter extends BaseExpandableListAdapter{
	private Activity activity;
	private Map<Item, ArrayList<Brand>> collections;
	private Map<Item, ArrayList<Brand>> originalCollections;
	private List<Item> list;
	private List<Item> originalList;
	private EditText itemName;
	private RadioButton radioButtonQuantity;
	private RadioButton radioButtonNeed;
	private Spinner spinnerCategory;
	private Spinner spinnerStorageArea;
	private CheckBox checkBoxneedfull;
	private EditText itemMininum;
	
	
	public ItemAdapter(Activity activity, ArrayList<Item> list,
			Map<Item, ArrayList<Brand>> collections) {
		this.activity = activity;
		this.collections = collections;
		this.list = list;
		
		originalList = new ArrayList<Item>();
		originalList.addAll(list);
		
		originalCollections = new HashMap<Item, ArrayList<Brand>>();
		originalCollections.putAll(collections);
	}

	
	@Override
	public Brand getChild(int groupPosition, int childPosition) {
		return collections.get(list.get(groupPosition)).get(
				childPosition);
	}

	@Override
	public long getChildId(int groupPosition, int childPosition) {
		return childPosition;
	}

	@Override
	public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {
		Brand brand = getChild(groupPosition, childPosition);
		
		LayoutInflater inflater = activity.getLayoutInflater();

		if (convertView == null) {
			convertView = inflater.inflate(R.layout.child_item, null);
		}

		TextView brandName = (TextView) convertView.findViewById(R.id.brand_text);
		
		brandName.setText(brand.getName());
		
		return convertView;
	}

	@Override
	public int getChildrenCount(int groupPosition) {
		return collections.get(list.get(groupPosition)).size();	
	}

	@Override
	public Item getGroup(int groupPosition) {
		return list.get(groupPosition);
	}

	@Override
	public int getGroupCount() {
		return list.size();
	}

	@Override
	public long getGroupId(int groupPosition) {
		return groupPosition;
	}

	@Override
	public View getGroupView(final int position, boolean isExpanded,
			View view, ViewGroup parent) {
		Item item = getGroup(position);
		
		if (view == null) {
			LayoutInflater infalInflater = (LayoutInflater) activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			view = infalInflater.inflate(R.layout.parent_item, null);
		}
		
		TextView itemName = (TextView) view.findViewById(R.id.itemText);
		itemName.setText(item.getName());
		
		ImageView deleteImage = (ImageView) view.findViewById(R.id.item_delete);
		deleteImage.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				deleteItem(position);
			}
		});
		
		ImageView editImage = (ImageView) view.findViewById(R.id.item_edit);
		editImage.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View view) {
				editItem(position);
			}
		});
		
		ImageView addImage = (ImageView) view.findViewById(R.id.item_add);
		addImage.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				
			}
		});
		
		sortList();
		
		return view;
	}

	@Override
	public boolean hasStableIds() {
		return true;
	}

	@Override
	public boolean isChildSelectable(int groupPosition, int childPosition) {
		return true;
	}
	
	public void addRow(Item item) {
		list.add(item);
		originalList.add(item);
		
		collections.put(item, new ArrayList<Brand>());
		originalCollections.put(item, new ArrayList<Brand>());
		
		sortList();
	}
	
	private void sortList() {
		Collections.sort(list, new Comparator<Item>() {
			@Override
			public int compare(Item i1, Item i2) {
	            return i1.getName().compareTo(i2.getName());
	        }

		});
	}
	
	public void filter(String charText) {
		charText = charText.toLowerCase(Locale.getDefault());
		list.clear();
		collections.clear();
		if (charText.length() == 0) {
			list.addAll(originalList);
			collections.putAll(originalCollections);
		} else {
			for (Item item : originalList) {
				ArrayList<Brand> brand = originalCollections.get(item);
				ArrayList<Brand> array = new ArrayList<Brand>();
				
				for(Brand b : brand){
					if(b.getName().toLowerCase(Locale.getDefault())
					.contains(charText)){
						array.add(b);
						
					}
				}
				
				if (!array.isEmpty() || item.getName().toLowerCase(Locale.getDefault())
						.contains(charText)){
					collections.put(item, array);
					list.add(item);
				}
			}
		}

		notifyDataSetChanged();
	}
	
	private void deleteItem(final int position){
		final DBItem db = new DBItem(activity);
		
		if(db.dependency(list.get(position).getId())) {
			
			new AlertDialog.Builder(activity)
			.setTitle(R.string.alert_dialog_delete_item_title)
			.setMessage(activity.getString(R.string.alert_dialog_delete_item) + " " + list.get(position).getName() + "?")
			.setNegativeButton(R.string.alert_dialog_cancel, new DialogInterface.OnClickListener() {
				
				@Override
				public void onClick(DialogInterface dialog, int which) {
					
				}
			})
			.setPositiveButton(R.string.alert_dialog_ok, new DialogInterface.OnClickListener() {
				
				@Override
				public void onClick(DialogInterface dialog, int which) {
					db.delete(list.get(position).getId());
					int originalPosition = originalList.indexOf(new Item(list.get(position).getId()));
					list.remove(position);
					originalList.remove(originalPosition);
					
					notifyDataSetChanged();
				}
			}).show();
		} else {
			Toast toast = Toast.makeText(activity, R.string.error_brands_dependency_items, Toast.LENGTH_LONG);
			toast.show();
		}
	}
	
	private void editItem(final int position){
		final View alertView = activity.getLayoutInflater().inflate(R.layout.alert_dialog_add_item, null);
		itemName = (EditText) alertView.findViewById(R.id.alert_dialog_item_text);
		itemMininum = (EditText) alertView.findViewById(R.id.alert_dialog_item_mininum);
		radioButtonQuantity = (RadioButton) alertView.findViewById(R.id.radio_quantity);
		radioButtonNeed = (RadioButton) alertView.findViewById(R.id.radio_need);
		checkBoxneedfull = (CheckBox) alertView.findViewById(R.id.checkNeedfull);
		spinnerCategory = (Spinner) alertView.findViewById(R.id.category_spinner);
		spinnerStorageArea = (Spinner) alertView.findViewById(R.id.storage_area_spinner);
		
		itemName.setText(list.get(position).getName());
		
		int type = list.get(position).getType();
		
		if(type == 1){
			radioButtonQuantity.setChecked(true);
		} else {
			radioButtonNeed.setChecked(true);
		}
		
		int needFull = list.get(position).getFavourite();

		if(needFull == 1){
			checkBoxneedfull.setChecked(true);
		}
		
		itemMininum.setText(String.valueOf(list.get(position).getMinimum()));
		
		populateSpinnerCategory(alertView.getContext());
		populateSpinnerStorageArea(alertView.getContext());
		
		spinnerCategory.setSelection((int) list.get(position).getCategoryId());
		spinnerStorageArea.setSelection((int) list.get(position).getStorageAreaId());
		
		AlertDialog alertDialog = new AlertDialog.Builder(activity).setTitle(R.string.alert_dialog_add_item)
				.setView(alertView)
				.setNegativeButton(R.string.alert_dialog_cancel, new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {

					}
				}).setPositiveButton(R.string.alert_dialog_ok, new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						if (itemName.getText().toString().equals("")) {
							Toast toast = Toast.makeText(alertView.getContext(), R.string.error_edit,Toast.LENGTH_SHORT);
							toast.show();
							return;
						}

						DBItem db = new DBItem(alertView.getContext());

						Item item = new Item();
						item.setName(itemName.getText().toString());

						if (radioButtonQuantity.isChecked()) {
							item.setType(1);
						} else {
							item.setType(2);
						}

						if (checkBoxneedfull.isChecked()) {
							item.setFavourite(1);
						} else {
							item.setFavourite(0);
						}
						
						item.setMinimum(Integer.parseInt(itemMininum.getText().toString()));

						item.setCategoryId(spinnerCategory.getSelectedItemId());
						item.setStorageAreaId(spinnerStorageArea.getSelectedItemId());

						db.update(item);
						
						int originalPosition = originalList.indexOf(new Item(list.get(position).getId()));
						list.set(position, item);
						originalList.set(originalPosition, item);
						
						notifyDataSetChanged();
						
						Toast toast = Toast.makeText(alertView.getContext(), R.string.alert_dialog_edit_item_toast,Toast.LENGTH_SHORT);
						toast.show();
					}
				}).create();
		alertDialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
		alertDialog.show();		
	}
	
	private void populateSpinnerCategory(Context context) {
		DBCategory db = new DBCategory(context);

		ArrayList<Category> categories = db.getAll();

		CategorySpinnerAdapter adapter = new CategorySpinnerAdapter(activity, categories);

		spinnerCategory.setAdapter(adapter);
	}

	private void populateSpinnerStorageArea(Context context) {
		DBStorageArea db = new DBStorageArea(context);

		ArrayList<StorageArea> storageAreas = db.getAll();

		StorageAreaSpinnerAdapter adapter = new StorageAreaSpinnerAdapter(activity, storageAreas);

		spinnerStorageArea.setAdapter(adapter);
	}
}
