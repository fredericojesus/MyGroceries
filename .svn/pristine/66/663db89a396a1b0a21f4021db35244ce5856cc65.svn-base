package com.example.mygroceries.database;

import java.util.ArrayList;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

public class DBBrand extends DBManager<Brand> {

	public DBBrand(Context context) {
		super(context);
	}

	@Override
	public long insert(Brand brand) {
		SQLiteDatabase db = this.getWritableDatabase();

		ContentValues values = new ContentValues();

		values.put(BRAND_NAME, brand.getName());
		values.put(BRAND_DESCRIPTION, brand.getDescription());
		values.put(BRAND_BARCODE, brand.getBarCode());
		values.put(BRAND_PRICE, brand.getPrice());
		values.put(BRAND_QUANTITY, brand.getQuantity());
		values.put(BRAND_ITEM_ID, brand.getItemId());

		long brand_id = db.insertOrThrow(TABLE_BRAND, null, values);

		closeDB();

		return brand_id;
	}

	@Override
	public void delete(long id) {
		SQLiteDatabase db = this.getWritableDatabase();

		db.delete(TABLE_BRAND, ID + " = ?", new String[] { String.valueOf(id) });

		closeDB();
	}

	@Override
	public void update(Brand brand) {
		SQLiteDatabase db = this.getWritableDatabase();

		ContentValues values = new ContentValues();

		values.put(BRAND_NAME, brand.getName());
		values.put(BRAND_DESCRIPTION, brand.getDescription());
		values.put(BRAND_BARCODE, brand.getBarCode());
		values.put(BRAND_PRICE, brand.getPrice());
		values.put(BRAND_QUANTITY, brand.getQuantity());
		values.put(BRAND_ITEM_ID, brand.getItemId());

		db.update(TABLE_BRAND, values, ID + " = ?",
				new String[] { String.valueOf(brand.getId()) });

		closeDB();
	}

	@Override
	public Brand getSingle(long id) {
		SQLiteDatabase db = this.getReadableDatabase();

		String selectQuery = "SELECT *" + " FROM " + TABLE_BRAND + " WHERE "
				+ ID + " = " + id;

		Cursor c = db.rawQuery(selectQuery, null);

		if (c != null) {
			c.moveToFirst();
		}

		Brand brand = new Brand();
		brand.setId(c.getLong(c.getColumnIndex(ID)));
		brand.setName(c.getString(c.getColumnIndex(BRAND_NAME)));
		brand.setDescription(c.getString(c.getColumnIndex(BRAND_DESCRIPTION)));
		brand.setBarCode(c.getString(c.getColumnIndex(BRAND_BARCODE)));
		brand.setPrice(c.getDouble(c.getColumnIndex(BRAND_PRICE)));
		brand.setQuantity(c.getInt(c.getColumnIndex(BRAND_QUANTITY)));
		brand.setItemId(c.getLong(c.getColumnIndex(BRAND_ITEM_ID)));

		closeDB();

		return brand;
	}

	@Override
	public ArrayList<Brand> getAll() {
		SQLiteDatabase db = this.getReadableDatabase();
		ArrayList<Brand> brands = new ArrayList<Brand>();

		String selectQuery = "SELECT P.* FROM " + TABLE_BRAND + " P ";

		Cursor c = db.rawQuery(selectQuery, null);

		if (c.moveToFirst()) {
			do {
				Brand brand = new Brand();
				brand.setId(c.getLong(c.getColumnIndex(ID)));
				brand.setName(c.getString(c.getColumnIndex(BRAND_NAME)));
				brand.setDescription(c.getString(c
						.getColumnIndex(BRAND_DESCRIPTION)));
				brand.setBarCode(c.getString(c.getColumnIndex(BRAND_BARCODE)));
				brand.setPrice(c.getDouble(c.getColumnIndex(BRAND_PRICE)));
				brand.setQuantity(c.getInt(c.getColumnIndex(BRAND_QUANTITY)));
				brand.setItemId(c.getLong(c.getColumnIndex(BRAND_ITEM_ID)));

				brands.add(brand);
			} while (c.moveToNext());
		}

		closeDB();

		return brands;
	}

	public ArrayList<Brand> getBrandWithItemId(long itemId) {
		SQLiteDatabase db = this.getReadableDatabase();
		ArrayList<Brand> brands = new ArrayList<Brand>();

		String selectQuery = "SELECT P.* FROM " + TABLE_BRAND + " P WHERE "
				+ BRAND_ITEM_ID + " = " + itemId;

		Cursor c = db.rawQuery(selectQuery, null);

		if (c.moveToFirst()) {
			do {
				Brand brand = new Brand();
				brand.setId(c.getLong(c.getColumnIndex(ID)));
				brand.setName(c.getString(c.getColumnIndex(BRAND_NAME)));
				brand.setDescription(c.getString(c
						.getColumnIndex(BRAND_DESCRIPTION)));
				brand.setBarCode(c.getString(c.getColumnIndex(BRAND_BARCODE)));
				brand.setPrice(c.getDouble(c.getColumnIndex(BRAND_PRICE)));
				brand.setQuantity(c.getInt(c.getColumnIndex(BRAND_QUANTITY)));
				brand.setItemId(c.getLong(c.getColumnIndex(BRAND_ITEM_ID)));

				brands.add(brand);
			} while (c.moveToNext());
		}

		closeDB();

		return brands;
	}
}
