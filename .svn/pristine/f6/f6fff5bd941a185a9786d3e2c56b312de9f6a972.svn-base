package com.example.mygroceries;

import java.util.ArrayList;
import java.util.Locale;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Service;
import android.content.Context;
import android.content.DialogInterface;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.MenuItem.OnActionExpandListener;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import com.example.mygroceries.adapter.StorageAreaAdapter;
import com.example.mygroceries.database.DBStorageArea;
import com.example.mygroceries.database.StorageArea;

public class StorageAreasFragment extends Fragment {
	private StorageAreaAdapter adapter;
	private ListView storageAreaList;
	private View rootView;
	private EditText storageAreaName;
	private DBStorageArea db;
	private EditText editSearch;
	private LayoutInflater layoutInflater;
	private Activity activity;

	@Override
	public View onCreateView(LayoutInflater layoutInflater, ViewGroup container, Bundle savedInstanceState) {
		this.layoutInflater = layoutInflater;
		rootView = layoutInflater.inflate(R.layout.fragment_storage_areas, container, false);
		setHasOptionsMenu(true);

		return rootView;
	}
	
	@Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
    	inflater.inflate(R.menu.stock_menu, menu);
    }

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		storageAreaList = (ListView) rootView.findViewById(R.id.storage_area_list);

		db = new DBStorageArea(rootView.getContext());

		ArrayList<StorageArea> storageArea = db.getAll();

		adapter = new StorageAreaAdapter(rootView.getContext(), storageArea);

		storageAreaList.setAdapter(adapter);
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		activity = this.getActivity();
	
		switch (item.getItemId()) {
        case R.id.search_menu:
			search(item);
			break;
        case R.id.add_menu:
			add(item);
			break;
		}
		return true;
	}
	
	private void search(MenuItem item){
		editSearch = (EditText) item.getActionView();	
    	editSearch.addTextChangedListener(textWatcher);

		item.setOnActionExpandListener(new OnActionExpandListener() {
			
			@Override
			public boolean onMenuItemActionExpand(MenuItem item) {
				editSearch.setText("");
                editSearch.requestFocus();
                
                InputMethodManager imm = (InputMethodManager) activity.getSystemService(Service.INPUT_METHOD_SERVICE);
                imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);
                return true;
			}
			
			@Override
			public boolean onMenuItemActionCollapse(MenuItem item) {
				editSearch.clearFocus();				 
                
                return true;
			}
		});
	}
	
	private void add(MenuItem item){		
		final View textEntryView = layoutInflater.inflate(R.layout.alert_dialog_cat_sto_text_entry, null);
		storageAreaName = (EditText) textEntryView.findViewById(R.id.alert_dialog_cat_sto_editText);
		
		AlertDialog alertDialog = new AlertDialog.Builder(this.getActivity())
		.setTitle(R.string.alert_dialog_add_storage_area)
		.setView(storageAreaName)
		.setNegativeButton(R.string.alert_dialog_cancel, new DialogInterface.OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				
			}
		})
		.setPositiveButton(R.string.alert_dialog_ok, new DialogInterface.OnClickListener() {
			
			@Override
			public void onClick(DialogInterface dialog, int which) {
				Context context = rootView.getContext();
				if(storageAreaName.getText().toString().equals(""))
					return;
				Toast toast = Toast.makeText(context, R.string.alert_dialog_add_storage_area_toast, Toast.LENGTH_SHORT);
				toast.show();
				
				StorageArea sto = new StorageArea(storageAreaName.getText().toString());
				long id = db.insert(sto);
				sto.setId(id);
				adapter.addRow(sto);
				adapter.notifyDataSetChanged();
			}
		}).show();
		alertDialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
    	alertDialog.show();
	}
	
	private TextWatcher textWatcher = new TextWatcher() {
		
		@Override
		public void onTextChanged(CharSequence s, int start, int before, int count) {
			String text = editSearch.getText().toString()
					.toLowerCase(Locale.getDefault());

			adapter.filter(text);
		}
		
		@Override
		public void beforeTextChanged(CharSequence s, int start, int count,
				int after) {
		}
		
		@Override
		public void afterTextChanged(Editable s) {
		}
	};
}