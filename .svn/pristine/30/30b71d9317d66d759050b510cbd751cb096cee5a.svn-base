package com.example.mygroceries.database;

import java.util.ArrayList;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

public class DBItem extends DBManager<Item> {

	public DBItem(Context context) {
		super(context);
	}

	@Override
	public long insert(Item item) {
		SQLiteDatabase db = this.getWritableDatabase();

		ContentValues values = new ContentValues();

		values.put(ITEM_NAME, item.getName());
		values.put(ITEM_TYPE, item.getType());
		values.put(ITEM_ESSENTIAL, item.getEssential());
		values.put(ITEM_MINIMUM, item.getMinimum());
		values.put(ITEM_QUANTITY, item.getQuantity());
		values.put(ITEM_CATEGORY_ID, item.getCategoryId());
		values.put(ITEM_STORAGE_AREA_ID, item.getStorageAreaId());

		long item_id = db.insert(TABLE_ITEM, null, values);

		closeDB();

		return item_id;
	}

	@Override
	public void delete(long id) {
		SQLiteDatabase db = this.getWritableDatabase();

		db.delete(TABLE_ITEM, ID + " = ?", new String[] { String.valueOf(id) });

		closeDB();
	}

	@Override
	public void update(Item item) {
		SQLiteDatabase dataBase = this.getWritableDatabase();

		ContentValues values = new ContentValues();

		values.put(ITEM_NAME, item.getName());
		values.put(ITEM_TYPE, item.getType());
		values.put(ITEM_ESSENTIAL, item.getEssential());
		values.put(ITEM_MINIMUM, item.getMinimum());
		values.put(ITEM_QUANTITY, item.getQuantity());
		values.put(ITEM_CATEGORY_ID, item.getCategoryId());
		values.put(ITEM_STORAGE_AREA_ID, item.getStorageAreaId());

		dataBase.update(TABLE_ITEM, values, ID + " = ?",
				new String[] { String.valueOf(item.getId()) });

		closeDB();
	}

	@Override
	public Item getSingle(long id) {
		SQLiteDatabase db = this.getReadableDatabase();

		String selectQuery = "SELECT  I.*, " + " FROM " + TABLE_ITEM + " I, "
				+ TABLE_BRAND + " B, " + TABLE_CATEGORY + " C, "
				+ TABLE_STORAGE_AREA + " SA, " + " WHERE I." + ID + " = " + id
				+ " AND C." + ID + " = I." + ITEM_CATEGORY_ID + " AND SA." + ID
				+ " = I." + ITEM_STORAGE_AREA_ID;

		Cursor c = db.rawQuery(selectQuery, null);

		if (c != null) {
			c.moveToFirst();
		}

		Item item = new Item();
		item.setId(c.getLong(c.getColumnIndex(ID)));
		item.setName(c.getString(c.getColumnIndex(ITEM_NAME)));
		item.setType(c.getInt(c.getColumnIndex(ITEM_TYPE)));
		item.setEssential(c.getInt(c.getColumnIndex(ITEM_ESSENTIAL)));
		item.setMinimum(c.getInt(c.getColumnIndex(ITEM_MINIMUM)));
		item.setQuantity(c.getInt(c.getColumnIndex(ITEM_QUANTITY)));
		item.setCategoryId(c.getLong(c.getColumnIndex(ITEM_CATEGORY_ID)));
		item.setStorageAreaId(c.getLong(c.getColumnIndex(ITEM_STORAGE_AREA_ID)));

		closeDB();

		return item;
	}

	@Override
	public ArrayList<Item> getAll() {
		SQLiteDatabase db = this.getReadableDatabase();
		ArrayList<Item> items = new ArrayList<Item>();

		String selectQuery = "SELECT * FROM " + TABLE_ITEM;

		Cursor c = db.rawQuery(selectQuery, null);

		items = readCursor(c);

		closeDB();

		return items;
	}
	
	public boolean changeQuantity(Item item, int op) {
		SQLiteDatabase db = this.getWritableDatabase();

		ContentValues values = new ContentValues();

		// 0 = del | 1 = add
		if (op == 0) {
			if (item.getQuantity() >= 0) {
				values.put(ITEM_QUANTITY, item.getQuantity() - 1);
			} else {
				closeDB();

				return false;
			}
		} else {
			values.put(ITEM_QUANTITY, item.getQuantity() + 1);
		}

		values.put(ITEM_NAME, item.getName());
		values.put(ITEM_TYPE, item.getType());
		values.put(ITEM_ESSENTIAL, item.getEssential());
		values.put(ITEM_MINIMUM, item.getMinimum());
		values.put(ITEM_CATEGORY_ID, item.getCategoryId());
		values.put(ITEM_STORAGE_AREA_ID, item.getStorageAreaId());

		db.update(TABLE_ITEM, values, ID + " = ?", new String[] { String.valueOf(item.getId()) });

		closeDB();

		return true;
	}
	
	public void changeType(long id, int type) {
		Item item = getItemById(id);

		SQLiteDatabase db = this.getWritableDatabase();

		ContentValues values = new ContentValues();

		values.put(ITEM_NAME, item.getName());
		values.put(ITEM_TYPE, type);
		values.put(ITEM_ESSENTIAL, item.getEssential());
		values.put(ITEM_MINIMUM, item.getMinimum());
		values.put(ITEM_QUANTITY, item.getQuantity());
		values.put(ITEM_CATEGORY_ID, item.getCategoryId());
		values.put(ITEM_STORAGE_AREA_ID, item.getStorageAreaId());

		db.update(TABLE_ITEM, values, ID + " = ?", new String[] { String.valueOf(item.getId()) });

		closeDB();
	}
	
	public Item getItemById(long id) {
		SQLiteDatabase db = this.getReadableDatabase();

		String selectQuery = "SELECT *" + " FROM " + TABLE_ITEM + " WHERE " + ID + " = '" + id + "'";

		Cursor c = db.rawQuery(selectQuery, null);

		if (c != null) {
			c.moveToFirst();
		}

		Item item = new Item();
		item.setId(c.getLong(c.getColumnIndex(ID)));
		item.setName(c.getString(c.getColumnIndex(ITEM_NAME)));
		item.setType(c.getInt(c.getColumnIndex(ITEM_TYPE)));
		item.setEssential(c.getInt(c.getColumnIndex(ITEM_ESSENTIAL)));
		item.setMinimum(c.getInt(c.getColumnIndex(ITEM_MINIMUM)));
		item.setQuantity(c.getInt(c.getColumnIndex(ITEM_QUANTITY)));
		item.setCategoryId(c.getLong(c.getColumnIndex(ITEM_CATEGORY_ID)));
		item.setStorageAreaId(c.getLong(c.getColumnIndex(ITEM_STORAGE_AREA_ID)));

		closeDB();

		return item;
	}
	
	public boolean dependency(long id) {
		SQLiteDatabase db = this.getReadableDatabase();

		String selectQuery = "SELECT 1 FROM " + TABLE_BRAND + " WHERE "
				+ BRAND_ITEM_ID + " = " + id;

		Cursor c = db.rawQuery(selectQuery, null);

		if (c.getCount() != 0) {
			closeDB();
			return false;
		}
		
		closeDB();
		return true;
	}
	
	public ArrayList<Item> filterCategory(long categoryId){
		SQLiteDatabase db = this.getReadableDatabase();
		ArrayList<Item> items = new ArrayList<Item>();

		String selectQuery = "SELECT * FROM " + TABLE_ITEM + " I WHERE I." + ITEM_CATEGORY_ID + " = " + categoryId;

		Cursor c = db.rawQuery(selectQuery, null);

		items = readCursor(c);

		closeDB();

		return items;
	}
	
	public ArrayList<Item> filterStorage(long storageId){
		SQLiteDatabase db = this.getReadableDatabase();
		ArrayList<Item> items = new ArrayList<Item>();

		String selectQuery = "SELECT * FROM " + TABLE_ITEM + " I WHERE I." + ITEM_STORAGE_AREA_ID + " = " + storageId;

		Cursor c = db.rawQuery(selectQuery, null);

		items = readCursor(c);
		
		closeDB();

		return items;
	}
	
	public ArrayList<Item> shoppingList(){
		SQLiteDatabase db = this.getReadableDatabase();
		ArrayList<Item> items = new ArrayList<Item>();

		String selectQuery = "SELECT * FROM " + TABLE_ITEM + " I WHERE " +
				" I." + ITEM_ESSENTIAL + " = " + "1 " +
				"AND (I." + ITEM_QUANTITY + " < " + ITEM_MINIMUM 
				+ " OR I." + ITEM_TYPE + " = 1)";

		Cursor c = db.rawQuery(selectQuery, null);

		items = readCursor(c);

		closeDB();

		return items;
	}
	
	private ArrayList<Item> readCursor(Cursor c){
		ArrayList<Item> items = new ArrayList<Item>();
		
		if (c.moveToFirst()) {
			do {
				Item item = new Item();
				item.setId(c.getInt((c.getColumnIndex(ID))));
				item.setName((c.getString(c.getColumnIndex(ITEM_NAME))));
				item.setType(c.getInt(c.getColumnIndex(ITEM_TYPE)));
				item.setEssential(c.getInt(c.getColumnIndex(ITEM_ESSENTIAL)));
				item.setMinimum(c.getInt(c.getColumnIndex(ITEM_MINIMUM)));
				item.setQuantity(c.getInt(c.getColumnIndex(ITEM_QUANTITY)));
				item.setCategoryId(c.getLong(c.getColumnIndex(ITEM_CATEGORY_ID)));
				item.setStorageAreaId(c.getLong(c.getColumnIndex(ITEM_STORAGE_AREA_ID)));

				items.add(item);
			} while (c.moveToNext());
		}
		
		return items;
	}
}
